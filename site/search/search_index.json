{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>pg-mcp is a multi-tenant Model Context Protocol server which bridges the connection between LLM Agents and PostgreSQL databases. Built with FastMCP, the official MCP Python SDK, and AsyncPG, the MCP server runs in \"server-mode\", communicating with agents via HTTP Server Side Events (SSE) and accepting PostgreSQL connection strings while providing read-only query access to connected databases.</p>"},{"location":"#concepts","title":"Concepts","text":"<p>pg-mcp allows you to bring your own language models in order to interact with your PostgreSQL databases:</p> <pre><code>graph TD\n    classDef mcpcolor fill:#a7f3d0,stroke:#0478573\n    UI &lt;--&gt; Agents[\"Agent(s)\"]\n    Agents &lt;--_HTTP/SSE_--&gt; MCP[\"**pg-mcp**\"]:::mcpcolor\n    MCP &lt;--_HTTP/TLS_--&gt; Resources[\"PostgreSQL Databases\"]\n    Agents &lt;--&gt; LLM[\"LLM(s)\"]</code></pre>"},{"location":"#how-it-works","title":"How it Works","text":"<p>MCP Servers provide additional tools and resources available to agents in order to enhance their capabilities. When supplied with a valid PostgreSQL database connection string, pg-mcp exposes enriched database schema information to agents, providing them with context about the structure and purpose of the database. </p> <p>Agents can take advantage of a well-documented database as pg-mcp will provide table and column comments/descriptions alongside the schema. This facilitates better understanding of user prompts from the standpoint of the database's business domain.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-Database Support: Connect to multiple PostgreSQL databases simultaneously</li> <li>Rich Catalog Information: Extract and expose table/column descriptions from the database catalog</li> <li>Extension Context: Detailed knowledge about PostgreSQL extensions like PostGIS and pgvector</li> <li>Query Explanation: Dedicated tool for analyzing query execution plans</li> <li>Secure Connection Management: Proper lifecycle for database connections with secure connection ID handling</li> <li>Natural Language to SQL: Built-in prompt to convert natural language to SQL queries</li> </ul>"},{"location":"#tools-and-resources","title":"Tools and Resources","text":""},{"location":"#tools","title":"Tools","text":"<ul> <li><code>connect</code> - creates the connection from the connection string and returns a UUID <code>conn_id</code></li> <li><code>disconnect</code> - closes the database connection associated with the <code>conn_id</code></li> <li><code>pg_query</code> - executes a read-only SQL query</li> <li><code>pg_explain</code> - provides the query execution plan for a query</li> </ul>"},{"location":"#resource-templates","title":"Resource Templates","text":"<p>Resource templates mirror the hierarchical object structure of PostgreSQL databases, and present them in a RESTful resource manner as URIs:</p> <ul> <li><code>pgmcp://{conn_id}/</code> - Comprehensive database information</li> <li><code>pgmcp://{conn_id}/schemas</code> - List all schemas</li> <li><code>pgmcp://{conn_id}/schemas/{schema}/tables</code> - List tables in a schema</li> <li><code>pgmcp://{conn_id}/schemas/{schema}/tables/{table}/columns</code> - Get columns for a table</li> <li><code>pgmcp://{conn_id}/schemas/{schema}/extensions</code> - List extensions in a schema</li> </ul>"},{"location":"#prompts","title":"Prompts","text":"<ul> <li><code>nl_to_sql</code> - Convert natural language questions to SQL queries</li> </ul>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#installation","title":"Installation","text":""},{"location":"quick_start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.13+</li> <li>PostgreSQL database(s)</li> </ul>"},{"location":"quick_start/#using-docker","title":"Using Docker","text":"<pre><code># Clone the repository\ngit clone https://github.com/stuzero/pg-mcp-server.git\ncd pg-mcp-server\n\n# Build and run with Docker Compose\ndocker-compose up -d\n</code></pre>"},{"location":"quick_start/#manual-installation","title":"Manual Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/stuzero/pg-mcp-server.git\ncd pg-mcp-server\n\n# Create and activate a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install using uv\nuv sync --frozen\n\n# Run the server\npython -m server.app\n</code></pre>"},{"location":"quick_start/#testing-the-server","title":"Testing the Server","text":"<p>The repository includes test scripts to verify server functionality:</p> <pre><code># Basic server functionality test\npython test.py \"postgresql://username:password@hostname:port/database\"\n\n# Claude-powered natural language to SQL conversion\npython client/claude_cli.py \"Show me the top 5 customers by total sales\"\n</code></pre> <p>The <code>claude_cli.py</code> script requires environment variables:</p> <pre><code># .env file\nDATABASE_URL=postgresql://username:password@hostname:port/database\nANTHROPIC_API_KEY=your-anthropic-api-key\nPG_MCP_URL=http://localhost:8000/sse\n</code></pre>"},{"location":"quick_start/#using-with-ai-agents","title":"Using with AI Agents","text":"<p>Example prompt for use with agents:</p> <pre><code>Use the PostgreSQL MCP server to analyze the database. \nAvailable tools:\n- connect: Register a database connection string and get a connection ID\n- disconnect: Close a database connection\n- pg_query: Execute SQL queries using a connection ID\n- pg_explain: Get query execution plans\n\nYou can explore schema resources via:\npgmcp://{conn_id}/schemas\npgmcp://{conn_id}/schemas/{schema}/tables\npgmcp://{conn_id}/schemas/{schema}/tables/{table}/columns\n</code></pre>"}]}